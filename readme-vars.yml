---

# project information
project_name: your_spotify
project_url: "https://github.com/Yooooomi/your_spotify"
project_logo: "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/your_spotify-logo.png"
project_blurb: |
  [{{ project_name|capitalize }}]({{ project_url }}) is a self-hosted application that tracks what you listen and offers you a dashboard to explore statistics about it! It's composed of a web server which polls the Spotify API every now and then and a web application on which you can explore your statistics.
project_lsio_github_repo_url: "https://github.com/linuxserver/docker-{{ project_name }}"
# supported architectures
available_architectures:
  - {arch: "{{ arch_x86_64 }}", tag: "amd64-latest"}
  - {arch: "{{ arch_arm64 }}", tag: "arm64v8-latest"}
# development version
development_versions: false
# container parameters
param_container_name: "{{ project_name }}"
param_usage_include_ports: true
param_ports:
  - {external_port: "80", internal_port: "80", port_desc: "your_spotify HTTP webui"}
  - {external_port: "443", internal_port: "443", port_desc: "your_spotify HTTPS webui"}
param_usage_include_env: true
param_env_vars:
  - {env_var: "TZ", env_value: "Europe/London", desc: "Specify a timezone to use EG Europe/London."}
  - {env_var: "APP_URL", env_value: "http://localhost", desc: "The protocol and hostname where the app will be accessed."}
  - {env_var: "SPOTIFY_PUBLIC", env_value: "", desc: "Your Spotify application client ID."}
  - {env_var: "SPOTIFY_SECRET", env_value: "", desc: "Your Spotify application secret."}
  - {env_var: "CORS", env_value: "http://localhost:80,https://localhost:443", desc: "Allowed CORS sources, set to `all` to allow any source."}
  - {env_var: "MONGO_ENDPOINT", env_value: "mongodb://mongo:27017/your_spotify", desc: "Set mongodb endpoint address/port."}
# application setup block
app_setup_block_enabled: true
app_setup_block: |
  You have to create a Spotify application through their [developer dashboard](https://developer.spotify.com/dashboard/applications) to get your Client ID and secret. Set the Redirect URI to match your APP_URL address with `/api/oauth/spotify/callback` included after the domain (i.e., `http://localhost/api/oauth/spotify/callback`).

  The application requires an external [mongodb database](https://hub.docker.com/_/mongo/), supported versions are 4.x, 5.x, and 6.x.

  This ia an all-in-one container which includes both the server and client components. If you require these to be separate then please use the releases from the [your_spotify repo](https://github.com/Yooooomi/your_spotify).
# init diagram
init_diagram: |
  "your_spotify:latest": {
    docker-mods
    base {
      fix-attr +\nlegacy cont-init
    }
    docker-mods -> base
    legacy-services
    custom services
    init-services -> legacy-services
    init-services -> custom services
    custom services -> legacy-services
    legacy-services -> ci-service-check
    init-migrations -> init-adduser
    init-nginx-end -> init-config
    init-os-end -> init-config
    init-config -> init-config-end
    init-your_spotify-config -> init-config-end
    init-os-end -> init-crontab-config
    init-mods-end -> init-custom-files
    base -> init-envfile
    init-os-end -> init-folders
    init-php -> init-keygen
    base -> init-migrations
    base -> init-mods
    init-config-end -> init-mods
    init-version-checks -> init-mods
    init-mods -> init-mods-end
    init-mods-package-install -> init-mods-end
    init-mods -> init-mods-package-install
    init-samples -> init-nginx
    init-permissions -> init-nginx-end
    base -> init-os-end
    init-adduser -> init-os-end
    init-envfile -> init-os-end
    init-migrations -> init-os-end
    init-keygen -> init-permissions
    init-nginx -> init-php
    init-folders -> init-samples
    init-custom-files -> init-services
    init-mods-end -> init-services
    init-config-end -> init-version-checks
    init-nginx-end -> init-your_spotify-config
    init-services -> svc-cron
    svc-cron -> legacy-services
    init-services -> svc-nginx
    svc-nginx -> legacy-services
    init-services -> svc-php-fpm
    svc-php-fpm -> legacy-services
    init-services -> svc-your_spotify
    svc-your_spotify -> legacy-services
  }
  Base Images: {
    "baseimage-alpine-nginx:3.20" <- "baseimage-alpine:3.20"
  }
  "your_spotify:latest" <- Base Images
# changelog
changelogs:
  - {date: "27.05.24:", desc: "Existing users should update their nginx confs to avoid http2 deprecation warnings."}
  - {date: "24.05.24:", desc: "Rebase to Alpine 3.20."}
  - {date: "02.03.24:", desc: "Updates for changes in 1.8.0. Initial DB migration may take several minutes."}
  - {date: "24.01.24:", desc: "Existing users should update: site-confs/default.conf - Cleanup default site conf."}
  - {date: "23.12.23:", desc: "Rebase to Alpine 3.19 with php 8.3."}
  - {date: "23.01.23:", desc: "Rebase to Alpine 3.18, standardize nginx default site conf."}
  - {date: "23.01.23:", desc: "Initial Release."}
